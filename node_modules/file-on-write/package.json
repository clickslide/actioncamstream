{
  "name": "file-on-write",
  "version": "0.2.0",
  "description": "a stream implementation that creates a file on every write",
  "main": "./index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "keywords": [
    "stream",
    "streams",
    "writer",
    "file",
    "filewriter"
  ],
  "repository": {
    "type": "git",
    "url": "https://github.com/mmaelzer/file-on-write"
  },
  "author": {
    "name": "Mike Maelzer",
    "email": "mmaelzer@gmail.com"
  },
  "license": "BSD",
  "readme": "file-on-write\n==================\n  \nA node.js stream implementation that takes a stream and creates files.\n  \n## Install\n```\nnpm install file-on-write\n```\n  \n  \n  \n## Usage\n\n```javascript\nvar FileOnWrite = require(\"file-on-write\");\nvar writer = new FileOnWrite({\n  path: './images',\n  ext: '.jpg',\n  filename: function(data) { return date.time; }\n});\n```\n  \n  \n## Options\n\n### path {String}\n* default `'./'`  \nThe path to write files to.\n  \n### ext {String}\n* default `''`\nThe file extension for the written files.\n  \n### filename {Function(chunk)}\n* default `Date.now()`\nA function used to generate files. The data piped into the `file-on-write` stream will be provided as the paramater to the `filename` function.\n  \n### sync {Boolean}\n* default `false`\nWrite files synchronously.\n  \n### context {Object}\n* default `undefined`\nThe context to call `filename()` and `transform()` with.\n  \n### transform {Function(chunk)}\n* default - return chunk\nProvide a transform method on the data passed into the `file-on-write` stream. Useful when only wanting to save a subset of the provided data.\n  \n  \n  \n## Example\nUsing `file-on-write` to write jpegs coming in from an [mjpeg-consumer](https://github.com/mmaelzer/mjpeg-consumer) stream:\n\n```javascript\nvar request = require(\"request\");\nvar MjpegConsumer = require(\"mjpeg-consumer\");\nvar FileOnWrite = require(\"file-on-write\");\n\nvar writer = new FileOnWrite({ \n  path: './video',\n  ext: '.jpg'\n});\nvar consumer = new MjpegConsumer();\n\nrequest(\"http://192.168.1.2/videostream.cgi\").pipe(consumer).pipe(writer);\n```",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/mmaelzer/file-on-write/issues"
  },
  "_id": "file-on-write@0.2.0",
  "dist": {
    "shasum": "69f4683bf698492f4f9151829d75a61e859fb5e3"
  },
  "_from": "file-on-write@*",
  "_resolved": "https://registry.npmjs.org/file-on-write/-/file-on-write-0.2.0.tgz"
}
