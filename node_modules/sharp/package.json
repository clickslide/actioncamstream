{
  "name": "sharp",
  "version": "0.4.2",
  "author": {
    "name": "Lovell Fuller",
    "email": "npm@lovell.info"
  },
  "contributors": [
    {
      "name": "Pierre Inglebert",
      "email": "pierre.inglebert@gmail.com"
    }
  ],
  "description": "High performance Node.js module to resize JPEG, PNG and WebP images using the libvips library",
  "scripts": {
    "test": "node tests/unit && node tests/perf",
    "install": "node-gyp rebuild"
  },
  "main": "index.js",
  "repository": {
    "type": "git",
    "url": "git://github.com/lovell/sharp"
  },
  "keywords": [
    "jpeg",
    "png",
    "webp",
    "tiff",
    "gif",
    "resize",
    "thumbnail",
    "sharpen",
    "crop",
    "embed",
    "libvips",
    "vips",
    "fast",
    "buffer"
  ],
  "dependencies": {
    "nan": "^1.1.0"
  },
  "devDependencies": {
    "imagemagick": "^0.1.3",
    "imagemagick-native": "^1.0.0",
    "gm": "^1.16.0",
    "async": "^0.9.0",
    "benchmark": "^1.0.0"
  },
  "license": "Apache 2.0",
  "engines": {
    "node": ">=0.10"
  },
  "gypfile": true,
  "readme": "# sharp\n\n* [Installation](https://github.com/lovell/sharp#installation)\n* [Usage examples](https://github.com/lovell/sharp#usage-examples)\n* [API](https://github.com/lovell/sharp#api)\n* [Testing](https://github.com/lovell/sharp#testing)\n* [Performance](https://github.com/lovell/sharp#performance)\n* [Licence](https://github.com/lovell/sharp#licence)\n\nThe typical use case for this high speed Node.js module is to convert large images of many formats to smaller, web-friendly JPEG, PNG and WebP images of varying dimensions.\n\nThe performance of JPEG resizing is typically 8x faster than ImageMagick and GraphicsMagick, based mainly on the number of CPU cores available. Everything remains non-blocking thanks to _libuv_.\n\nThis module supports reading and writing images of JPEG, PNG and WebP to and from both Buffer objects and the filesystem. It also supports reading images of many other types from the filesystem via libmagick++ or libgraphicsmagick++ if present.\n\nWhen generating JPEG output all metadata is removed and Huffman tables optimised without having to use separate command line tools like [jpegoptim](https://github.com/tjko/jpegoptim) and [jpegtran](http://jpegclub.org/jpegtran/).\n\nAnyone who has used the Node.js bindings for [GraphicsMagick](https://github.com/aheckmann/gm) will find the API similarly fluent.\n\nThis module is powered by the blazingly fast [libvips](https://github.com/jcupitt/libvips) image processing library, originally created in 1989 at Birkbeck College and currently maintained by John Cupitt.\n\n## Installation\n\n\tnpm install sharp\n\n### Prerequisites\n\n* Node.js v0.10+\n* [libvips](https://github.com/jcupitt/libvips) v7.38.5+\n\n_libvips_ will take advantage of [liborc](http://code.entropywave.com/orc/) if present, however versions of _liborc_ prior to 0.4.19 suffer memory leaks.\n\n### Install libvips on Mac OS\n\n\tbrew install homebrew/science/vips --with-webp --with-graphicsmagick\n\nThe _gettext_ dependency of _libvips_ [can lead](https://github.com/lovell/sharp/issues/9) to a `library not found for -lintl` error. If so, please try:\n\n\tbrew link gettext --force\n\n### Install libvips on Ubuntu Linux\n\n#### Ubuntu 14.x\n\n\tsudo apt-get install libvips-dev\n\n#### Ubuntu 13.x\n\nCompiling from source is recommended:\n\n\tsudo apt-get install automake build-essential git gobject-introspection gtk-doc-tools libfftw3-dev libglib2.0-dev libjpeg-turbo8-dev libpng12-dev libwebp-dev libtiff5-dev libxml2-dev swig\n\tgit clone https://github.com/jcupitt/libvips.git\n\tcd libvips\n\tgit checkout 7.38\n\t./bootstrap.sh\n\t./configure --enable-debug=no --enable-cxx=no --without-python --without-orc\n\tmake\n\tsudo make install\n\tsudo ldconfig\n\n#### Ubuntu 12.x\n\nRequires `libtiff4-dev` instead of `libtiff5-dev` and has [a bug](https://bugs.launchpad.net/ubuntu/+source/libwebp/+bug/1108731) in the libwebp package. Work around these problems by running these command first:\n\n\tsudo add-apt-repository ppa:lyrasis/precise-backports\n\tsudo apt-get update\n\tsudo apt-get install libtiff4-dev\n\nThen follow Ubuntu 13.x instructions.\n\n## Usage examples\n\n```javascript\nvar sharp = require('sharp');\n```\n\n```javascript\nsharp('input.jpg').resize(300, 200).write('output.jpg', function(err) {\n  if (err) {\n    throw err;\n  }\n  // output.jpg is a 300 pixels wide and 200 pixels high image\n  // containing a scaled and cropped version of input.jpg\n});\n```\n\n```javascript\nsharp('input.jpg').resize(null, 200).progressive().toBuffer(function(err, outputBuffer) {\n  if (err) {\n    throw err;\n  }\n  // outputBuffer contains progressive JPEG image data, 200 pixels high\n});\n```\n\n```javascript\nsharp('input.png').resize(300).sharpen().quality(90).webp(function(err, outputBuffer) {\n  if (err) {\n    throw err;\n  }\n  // outputBuffer contains 300 pixels wide, sharpened, 90% quality WebP image data\n});\n```\n\n```javascript\nsharp(inputBuffer).resize(200, 300).embedWhite().write('output.tiff', function(err) {\n  if (err) {\n    throw err;\n  }\n  // output.tiff is a 200 pixels wide and 300 pixels high image containing a scaled\n  // version, embedded on a white canvas, of the image data in buffer\n});\n```\n\n```javascript\nsharp('input.gif').resize(200, 300).embedBlack().webp(function(err, outputBuffer) {\n  if (err) {\n    throw err;\n  }\n  // outputBuffer contains WebP image data of a 200 pixels wide and 300 pixels high\n  // containing a scaled version, embedded on a black canvas, of input.gif\n});\n```\n\n```javascript\nsharp(inputBuffer).resize(200, 200).max().jpeg(function(err, outputBuffer) {\n  if (err) {\n    throw err;\n  }\n  // outputBuffer contains JPEG image data no wider than 200 pixels and no higher\n  // than 200 pixels regardless of the inputBuffer image dimensions\n});\n```\n\n## API\n\n### sharp(input)\n\nConstructor to which further methods are chained. `input` can be one of:\n\n* Buffer containing JPEG, PNG or WebP image data, or\n* String containing the filename of an image, with most major formats supported.\n\n### resize(width, [height])\n\nScale to `width` x `height`. By default, the resized image is cropped to the exact size specified.\n\n`width` is the Number of pixels wide the resultant image should be. Use `null` or `undefined` to auto-scale the width to match the height.\n\n`height` is the Number of pixels high the resultant image should be. Use `null` or `undefined` to auto-scale the height to match the width.\n\n### crop()\n\nCrop the resized image to the exact size specified, the default behaviour.\n\n### max()\n\nPreserving aspect ratio, resize the image to the maximum width or height specified.\n\nBoth `width` and `height` must be provided via `resize` otherwise the behaviour will default to `crop`.\n\n### embedWhite()\n\nEmbed the resized image on a white background of the exact size specified.\n\n### embedBlack()\n\nEmbed the resized image on a black background of the exact size specified.\n\n### sharpen()\n\nPerform a mild sharpen of the resultant image. This typically reduces performance by 30%.\n\n### progressive()\n\nUse progressive (interlace) scan for JPEG and PNG output. This typically reduces compression performance by 30% but results in an image that can be rendered sooner when decompressed.\n\n### quality(quality)\n\nThe output quality to use for lossy JPEG, WebP and TIFF output formats. The default quality is `80`.\n\n`quality` is a Number between 1 and 100.\n\n### compressionLevel(compressionLevel)\n\nAn advanced setting for the _zlib_ compression level of the lossless PNG output format. The default level is `6`.\n\n`compressionLevel` is a Number between -1 and 9.\n\n### sequentialRead()\n\nAn advanced setting that switches the libvips access method to `VIPS_ACCESS_SEQUENTIAL`. This will reduce memory usage and can improve performance on some systems.\n\n### write(filename, callback)\n\n`filename` is a String containing the filename to write the image data to. The format is inferred from the extension, with JPEG, PNG, WebP and TIFF supported.\n\n`callback` is called with a single argument `(err)` containing an error message, if any.\n\n### jpeg(callback)\n\nWrite JPEG image data to a Buffer.\n\n`callback` gets two arguments `(err, buffer)` where `err` is an error message, if any, and `buffer` is the resultant JPEG image data.\n\n### png(callback)\n\nWrite PNG image data to a Buffer.\n\n`callback` gets two arguments `(err, buffer)` where `err` is an error message, if any, and `buffer` is the resultant PNG image data.\n\n### webp(callback)\n\nWrite WebP image data to a Buffer.\n\n`callback` gets two arguments `(err, buffer)` where `err` is an error message, if any, and `buffer` is the resultant WebP image data.\n\n### toBuffer(callback)\n\nWrite image data to a Buffer, the format of which will match the input image. JPEG, PNG and WebP are supported.\n\n`callback` gets two arguments `(err, buffer)` where `err` is an error message, if any, and `buffer` is the resultant image data.\n\n### sharp.cache([limit])\n\nIf `limit` is provided, set the (soft) limit of _libvips_ working/cache memory to this value in MB. The default value is 100.\n\nThis method always returns cache statistics, useful for determining how much working memory is required for a particular task.\n\nWarnings such as _Application transferred too many scanlines_ are a good indicator you've set this value too low.\n\n```javascript\nvar stats = sharp.cache(); // { current: 98, high: 115, limit: 100 }\nsharp.cache(200); // { current: 98, high: 115, limit: 200 }\nsharp.cache(50); // { current: 49, high: 115, limit: 50 }\n```\n\n## Testing\n\n[![Build Status](https://travis-ci.org/lovell/sharp.png?branch=master)](https://travis-ci.org/lovell/sharp)\n\n\tnpm test\n\nRunning the tests requires both ImageMagick and GraphicsMagick plus one of either libmagick++-dev or libgraphicsmagick++.\n\n\tbrew install imagemagick\n\tbrew install graphicsmagick\n\n\tsudo apt-get install imagemagick graphicsmagick libmagick++-dev\n\n## Performance\n\n### Test environment\n\n* Intel Xeon [L5520](http://ark.intel.com/products/40201/Intel-Xeon-Processor-L5520-8M-Cache-2_26-GHz-5_86-GTs-Intel-QPI) 2.27GHz 8MB cache\n* Ubuntu 13.10\n* libvips 7.38.5\n\n### The contenders\n\n* [imagemagick-native](https://github.com/mash/node-imagemagick-native) - Supports Buffers only and blocks main V8 thread whilst processing.\n* [imagemagick](https://github.com/rsms/node-imagemagick) - Supports filesystem only and \"has been unmaintained for a long time\".\n* [gm](https://github.com/aheckmann/gm) - Fully featured wrapper around GraphicsMagick.\n* sharp - Caching within libvips disabled to ensure a fair comparison.\n\n### The task\n\nDecompress a 2725x2225 JPEG image, resize and crop to 720x480, then compress to JPEG.\n\n### Results\n\n| Module                | Input  | Output | Ops/sec | Speed-up |\n| :-------------------- | :----- | :----- | ------: | -------: |\n| imagemagick-native    | buffer | buffer |    0.97 |        1 |\n| imagemagick           | file   | file   |    2.49 |      2.6 |\n| gm                    | buffer | file   |    3.72 |      3.8 |\n| gm                    | buffer | buffer |    3.80 |      3.9 |\n| gm                    | file   | file   |    3.67 |      3.8 |\n| gm                    | file   | buffer |    3.67 |      3.8 |\n| sharp                 | buffer | file   |   13.62 |     14.0 |\n| sharp                 | buffer | buffer |   12.43 |     12.8 |\n| sharp                 | file   | file   |   13.02 |     13.4 |\n| sharp                 | file   | buffer |   11.15 |     11.5 |\n| sharp +sharpen        | file   | buffer |   10.26 |     10.6 |\n| sharp +progressive    | file   | buffer |    9.44 |      9.7 |\n| sharp +sequentialRead | file   | buffer |   11.94 |     12.3 |\n\nYou can expect much greater performance with caching enabled (default) and using 16+ core machines.\n\n## Licence\n\nCopyright 2013, 2014 Lovell Fuller and Pierre Inglebert\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at [http://www.apache.org/licenses/LICENSE-2.0](http://www.apache.org/licenses/LICENSE-2.0.html)\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/lovell/sharp/issues"
  },
  "homepage": "https://github.com/lovell/sharp",
  "_id": "sharp@0.4.2",
  "_shasum": "e1c369ebe680b04c8021da0159954ba2a455f046",
  "_from": "sharp@*",
  "_resolved": "https://registry.npmjs.org/sharp/-/sharp-0.4.2.tgz"
}
