{
  "name": "redback",
  "description": "A high-level Redis library",
  "version": "0.3.6",
  "homepage": "https://github.com/chriso/redback",
  "author": {
    "name": "Chris O'Hara",
    "email": "cohara87@gmail.com"
  },
  "main": "index",
  "scripts": {
    "test": "make test"
  },
  "bugs": {
    "url": "http://github.com/chriso/redback/issues"
  },
  "repository": {
    "type": "git",
    "url": "http://github.com/chriso/redback.git"
  },
  "engines": {
    "node": ">= 0.4.0"
  },
  "dependencies": {
    "redis": "*"
  },
  "devDependencies": {
    "expresso": "*",
    "stem": "*"
  },
  "contributors": [
    {
      "name": "Sreekanth",
      "email": "sreeix@gmail.com"
    }
  ],
  "licenses": [
    {
      "type": "MIT",
      "url": "http://github.com/chriso/redback/raw/master/LICENSE"
    }
  ],
  "readme": "**redback** - A high-level Redis library for Node.JS.\n\nFollow [redbackjs.com](http://redbackjs.com/) and [@chris6F](twitter.com/chris6F) for updates.\n\n    npm install -g redback\n\n## What is it?\n\nRedback provides an accessible and extensible interface to the Redis\n[data types](http://redis.io/topics/data-types) and allows you to roll\nyour own structures with ease. Redback comes with the following built-in\nstructures: **List**,  **Set**, **SortedSet**, **Hash**, **Channel**, **Cache**\n\nIt also comes with the following advanced data structures:\n\n- **DensitySet** - A sorted set where adding an element increments its score and removing it decrements it.\n- **KeyPair** - Uses two hash structures and an auto-incrementing key to assign an ID to each unique value\n- **SocialGraph** - Similar to Twitter's (following vs. followers)\n- **CappedList** - A list with a fixed length\n- **FullText** - A full text index with support for stop words, stemming and basic boolean search\n- **Queue** - A simple FIFO or LIFO queue\n- **RateLimit** - Count the number of times an event occurs over an interval. Can be used for IP rate limiting. See [this blog post](http://chris6f.com/rate-limiting-with-redis)\n- **BloomFilter** - A probabilistic structure used to test whether an an element exists in a set. Contributed by user [sreeix](https://github.com/sreeix)\n\n*Have an idea for an advanced structure? Send a pull request and I'll add you as a contributor.*\n\n## Usage\n\n```javascript\nvar redback = require('redback').createClient();\n\n// or\n\nvar redis = require('redis').createClient();\nvar redback = require('redback').use(redis);\n```\n\n```javascript\nvar user3 = redback.createSocialGraph(3);\nuser3.follow(1, callback);\n\nvar text = redback.createFullText('my_index');\ntext.indexFile({1: 'file1.txt', 2: 'file2.txt'}, callback);\ntext.search('foo bar -exclude -these -words', callback);\n\nvar user1 = redback.createHash('user1');\nuser.set({username:'chris', password:'redisisawesome'}, callback);\n\nvar log = redback.createCappedList('log', 1000);\nlog.push('Log message ...');\n```\n\n## Creating your own structures\n\nTo create your own structure, use `addStructure(name, methods)`.\n\nLet's create a queue that can be either FIFO or LIFO\n\n```javascript\nredback.addStructure('SimpleQueue', {\n    init: function (is_fifo) {\n        this.fifo = is_fifo;\n    },\n    add: function (value, callback) {\n        this.client.lpush(this.key, value, callback);\n    },\n    next: function (callback) {\n        var method = this.fifo ? 'rpop' : 'lpop';\n        this.client[method](this.key, callback);\n    }\n});\n```\n\nTo use the queue, call `createSimpleQueue(key, is_fifo)`\n\n```javascript\nvar queue = redback.createSimpleQueue('my_queue', true);\nqueue.add('awesome!');\n```\n\nStructures have access to a Redis key `this.key` and the Redis client\n`this.client`. If an `init()` method is defined then it is called after\nthe structure is instantiated. Also note that `init()` receives any extra parameters\nfrom `create<structure>()`.\n\n## Other uses\n\n**Cache backend**\n\n```javascript\nvar cache = redback.createCache(namespace);\ncache.set('foo', 'bar', callback);\ncache.get('foo', function (err, foo) {\n    console.log(foo); //bar\n});\n```\n\n**Pub/sub provider**\n\n```javascript\nvar channel = redback.createChannel('chat').subscribe();\n\n//To received messages\nchannel.on('message', function (msg) {\n   console.log(msg);\n});\n\n//To send messages\nchannel.publish(msg);\n```\n\n## Want to learn more?\n\nFor now, see the [annotated source](http://redbackjs.com/api.html) for more information.\n\n## Credits\n\n- Matt Ranney for his awesome [node_redis](https://github.com/mranney/node_redis) library.\n\n## License\n\n(MIT License)\n\nCopyright (c) 2010 Chris O'Hara <cohara87@gmail.com>\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n",
  "readmeFilename": "README.md",
  "_id": "redback@0.3.6",
  "dist": {
    "shasum": "090906551b3a0ac561ee218e7411c63e160d91c3"
  },
  "_from": "redback@*",
  "_resolved": "https://registry.npmjs.org/redback/-/redback-0.3.6.tgz"
}
